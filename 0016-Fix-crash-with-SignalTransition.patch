From 7dcda224fe73cb51a29e8946afd641a989d7209a Mon Sep 17 00:00:00 2001
From: Simon Hausmann <simon.hausmann@qt.io>
Date: Wed, 25 May 2016 16:22:44 +0200
Subject: [PATCH 16/40] Fix crash with SignalTransition

Don't crash when using SignalTransition with a signal object instead of the
slot used to emit the signal. A signal object is just as good.

Task-number: QTBUG-53596
Change-Id: I8a419d16ec0c257c9a798a83ee5bad338794cdd2
Reviewed-by: Michael Brasser <michael.brasser@live.com>
---
 src/imports/statemachine/signaltransition.cpp      | 26 ++++++--
 src/qml/jsruntime/qv4qobjectwrapper_p.h            |  2 +-
 .../qmltest/statemachine/tst_signaltransition.qml  | 76 ++++++++++++++++++++++
 3 files changed, 96 insertions(+), 8 deletions(-)
 create mode 100644 tests/auto/qmltest/statemachine/tst_signaltransition.qml

diff --git a/src/imports/statemachine/signaltransition.cpp b/src/imports/statemachine/signaltransition.cpp
index 33ee11c..4f6c769 100644
--- a/src/imports/statemachine/signaltransition.cpp
+++ b/src/imports/statemachine/signaltransition.cpp
@@ -105,15 +105,27 @@ void SignalTransition::setSignal(const QJSValue &signal)
     QV4::ExecutionEngine *jsEngine = QV8Engine::getV4(QQmlEngine::contextForObject(this)->engine());
     QV4::Scope scope(jsEngine);
 
-    QV4::Scoped<QV4::QObjectMethod> qobjectSignal(scope, QJSValuePrivate::convertedToValue(jsEngine, m_signal));
-    Q_ASSERT(qobjectSignal);
-
-    QObject *sender = qobjectSignal->object();
-    Q_ASSERT(sender);
-    QMetaMethod metaMethod = sender->metaObject()->method(qobjectSignal->methodIndex());
+    QObject *sender;
+    QMetaMethod signalMethod;
+
+    QV4::ScopedValue value(scope, QJSValuePrivate::convertedToValue(jsEngine, m_signal));
+
+    // Did we get the "slot" that can be used to invoke the signal?
+    if (QV4::QObjectMethod *signalSlot = value->as<QV4::QObjectMethod>()) {
+        sender = signalSlot->object();
+        Q_ASSERT(sender);
+        signalMethod = sender->metaObject()->method(signalSlot->methodIndex());
+    } else if (QV4::QmlSignalHandler *signalObject = value->as<QV4::QmlSignalHandler>()) { // or did we get the signal object (the one with the connect()/disconnect() functions) ?
+        sender = signalObject->object();
+        Q_ASSERT(sender);
+        signalMethod = sender->metaObject()->method(signalObject->signalIndex());
+    } else {
+        qmlInfo(this) << tr("Specified signal does not exist.");
+        return;
+    }
 
     QSignalTransition::setSenderObject(sender);
-    QSignalTransition::setSignal(metaMethod.methodSignature());
+    QSignalTransition::setSignal(signalMethod.methodSignature());
 
     connectTriggered();
 }
diff --git a/src/qml/jsruntime/qv4qobjectwrapper_p.h b/src/qml/jsruntime/qv4qobjectwrapper_p.h
index 1126013..0fc39b2 100644
--- a/src/qml/jsruntime/qv4qobjectwrapper_p.h
+++ b/src/qml/jsruntime/qv4qobjectwrapper_p.h
@@ -166,7 +166,7 @@ struct Q_QML_EXPORT QObjectMethod : public QV4::FunctionObject
     static void markObjects(Heap::Base *that, QV4::ExecutionEngine *e);
 };
 
-struct QmlSignalHandler : public QV4::Object
+struct Q_QML_EXPORT QmlSignalHandler : public QV4::Object
 {
     V4_OBJECT2(QmlSignalHandler, QV4::Object)
     V4_PROTOTYPE(signalHandlerPrototype)
diff --git a/tests/auto/qmltest/statemachine/tst_signaltransition.qml b/tests/auto/qmltest/statemachine/tst_signaltransition.qml
new file mode 100644
index 0000000..0e35207
--- /dev/null
+++ b/tests/auto/qmltest/statemachine/tst_signaltransition.qml
@@ -0,0 +1,76 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Ford Motor Company
+** Copyright (C) 2016 The Qt Company
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the test suite module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtTest 1.1
+import QtQml.StateMachine 1.0
+
+TestCase {
+    id: testCase
+    StateMachine {
+        id: machine
+        initialState: startState
+        State {
+            id: startState
+            SignalTransition {
+                id: signalTrans
+                signal: testCase.onMysignal
+                targetState: finalState
+            }
+        }
+        FinalState {
+            id: finalState
+        }
+    }
+
+    SignalSpy {
+        id: finalStateActive
+        target: finalState
+        signalName: "activeChanged"
+    }
+
+    signal mysignal()
+
+    name: "testSignalTransition"
+    function test_signalTransition()
+    {
+        // Start statemachine, should not have reached finalState yet.
+        machine.start()
+        tryCompare(finalStateActive, "count", 0)
+        tryCompare(machine, "running", true)
+
+        testCase.mysignal()
+        tryCompare(finalStateActive, "count", 1)
+        tryCompare(machine, "running", false)
+    }
+}
-- 
1.9.3

